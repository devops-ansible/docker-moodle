---

name: "Build Docker images for Moodle"

on:
  workflow_dispatch:
  push:
    branches:
      - "master"
  schedule:
    - cron: "11 23 * * 0"

env:
  REFS_REFLECTED_AFTER: "20210101000000"
  REGISTRY_URL:         "docker.io/"
  IMAGE_NAME:           "jugendpresse/moodle"

jobs:

  get_build_info:
    runs-on: "ubuntu-latest"
    outputs:
      tags:           "${{ steps.moodle_gitinfo.outputs.tags }}"
      retagging:      "${{ steps.moodle_gitinfo.outputs.retagging }}"
      stablebranches: "${{ steps.moodle_gitinfo.outputs.stablebranches }}"

    steps:

      - name: "Checkout this repository"
        uses: "actions/checkout@v2"
        with:
          ref: "master"
          path: "docker"

      - name: "Checkout Moodle Git Repo"
        uses: "actions/checkout@v2"
        with:
          # repository: "git://git.moodle.org/moodle.git"
          repository: "moodle/moodle"
          path: "docker/app"

      - name: "prepare git refs"
        run: |
          cd ./docker/app
          git fetch --all --tags

      - name: "get actual app tags and stable branches"
        id: "moodle_gitinfo"
        # jq -c '{ "tags": map({"tag": .}) }'
        run: |
          cd ./docker/app
          # only commits on and after this date should be reflected (format `%Y%m%d%H%M%I`)
          rflctdDt="20210101000000"
          dateFormat="%Y%m%d%H%M%S"
          # get all tags with their date referenced formatted sortable `%Y%m%d%H%M%I`
          allTags=$( git for-each-ref --sort='-*authordate' --format="%(*authordate:format:${dateFormat})%09%(refname:short)" "refs/tags" )
          # filter tags by date
          tagsToBeReflected=$( echo "${allTags}" | awk -v rd="${rflctdDt}" 'BEGIN{FS="\t"}{ if ($1+0 >= rd+0) print $2 }' )
          # get all versions tags to be checked and built
          versionTags=$( echo "${tagsToBeReflected}" | sed -E '/^v[0-9]+\.[0-9]+\.[0-9]+$/!d' | sort --version-sort --reverse | uniq )
          # get the latest tag to be always built
          latest="$( echo "${versionTags}" | head -n 1 )"

          # get all “stable” branches
          stableBranches=$( git for-each-ref --sort='-*authordate' --format="%(refname:short)" "refs/remotes" | sed "s|origin/||g" | grep 'STABLE' )
          # Find those branches, where the newest leaf was commited after `rflctdDt`.
          # For futher actions, the newest commit date of the branch is also printed.
          reflectingBranches=$( while read branch ; do
              lc=$( git rev-parse "origin/${branch}" )
              cd=$( git show -s --date="format:${dateFormat}" --format="%ad" "${lc}" )
              if [[ ${cd} -gt ${rflctdDt} ]]; then
                  echo -e "${branch}\t${cd}"
              fi
          done < <( echo "${stableBranches}" ) )
          # get the branch names of reflected branches
          branchesToBeReflected=$( echo "${reflectingBranches}" | awk 'BEGIN{FS="\t"}{ print $1 }' )
          # get those branch names which were commited within the last month to be built on a regular basis
          oneMonthAgo=$( date -d "-1 month" "+${dateFormat}" )
          branchesToRenew=$( echo "${reflectingBranches}" | awk -v cd="${oneMonthAgo}" 'BEGIN{FS="\t"}{ if ( $2+0 >= cd+0 ) print $1 }' )

          # all tags already built
          built_tags="$( cat ../built.json | jq '{ "built": .tags | keys }' )"
          # and ensure only new ones (and latest version) will be built
          build_tags="$(
              echo "${versionTags}" |
              jq --raw-input --slurp 'split("\n") | .[0:-1] | { "tags": . }' |
              jq --argjson builtJson "${built_tags}" '. + $builtJson' |
              jq '. as $d | .tags | del( .[ indices($d.built[])[] ] )' |
              jq --arg latest "${latest}" '. + [ $latest ]' |
              jq '{ "tags": . | unique }'
          )"
          # get all tags that should be retagged
          version_retagging=$(
              jq --null-input --arg latest "${latest}" '{ "latest": $latest }'
          )
          v2=$( echo "${versionTags}" | sed -E 's/^(v[0-9]+\.[0-9]+)\.[0-9]+$/\1/g' | uniq )
          IFS=$'\n'
          for v in ${v2}; do
              vv=$( echo "${versionTags}" | grep "${v}" | head -n 1 )
              if [ ! -z "${vv}" ]; then
                  version_retagging=$(
                      echo "${version_retagging}" |
                      jq --arg key "${v}" --arg val "${vv}" '.[$key] = $val'
                  )
              fi
          done
          v1=$( echo "${versionTags}" | sed -E 's/^(v[0-9]+)\.[0-9]+\.[0-9]+$/\1/g' | uniq )
          for v in ${v1}; do
              vv=$( echo "${versionTags}" | grep "${v}" | head -n 1 )
              if [ ! -z "${vv}" ]; then
                  version_retagging=$(
                      echo "${version_retagging}" |
                      jq --arg key "${v}" --arg val "${vv}" '.[$key] = $val'
                  )
              fi
          done

          # Debug information about tags and write usable output
          outputTags="$( echo "${build_tags}" )"
          echo
          echo "Tags being build:"
          echo "${outputTags}"
          echo "::set-output name=tags::$( echo "${outputTags}" | jq -c )"
          # Debug information about tags and write usable output
          outputRetagging="$( echo "${version_retagging}" | jq '{ "retagging": . }' )"
          echo
          echo "Tags being retagged:"
          echo "${outputRetagging}"
          echo "::set-output name=retagging::$( echo "${outputRetagging}" | jq -c )"
          # Debug information about stable branches and write usable output
          outputBranches="$( echo "${branchesToRenew}" | jq --raw-input --slurp 'split("\n") | .[0:-1] | { "branches": . }' )"
          echo
          echo "Stable branches to be built:"
          echo "${outputBranches}"
          echo "::set-output name=stablebranches::$( echo "${outputBranches}" | jq -c )"

  build_missing_images_by_stable_branches:

    needs: "get_build_info"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix: "${{ fromJSON( needs.get_build_info.outputs.stablebranches ) }}"

    steps:

      - name: "Login to DockerHub"
        uses: "docker/login-action@v1"
        with:
          username: "${{ secrets.DOCKERHUB_USER }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: "Checkout this repository"
        uses: "actions/checkout@v2"
        with:
          ref: "master"
          path: "docker"

      - name: "Checkout Moodle Git repository"
        uses: "actions/checkout@v2"
        with:
          # repository: "git://git.moodle.org/moodle.git"
          repository: "moodle/moodle"
          ref: "${{ matrix.branches }}"
          path: "docker/app"

      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v1"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"

      - name: "Build and push ${{ matrix.branches }}"
        id: "docker_build"
        uses: "docker/build-push-action@v2"
        with:
          push: true
          tags: "${{ env.IMAGE_NAME }}:${{ matrix.branches }}"
          no-cache: true
          context: "./docker/"
          file: "./docker/Dockerfile"
          platforms: linux/amd64,linux/arm64

  build_missing_images_by_tags:

    needs: "get_build_info"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix: "${{ fromJSON( needs.get_build_info.outputs.tags ) }}"

    steps:

      - name: "Login to DockerHub"
        uses: "docker/login-action@v1"
        with:
          username: "${{ secrets.DOCKERHUB_USER }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: "Checkout this repository"
        uses: "actions/checkout@v2"
        with:
          ref: "master"
          path: "docker"

      - name: "Checkout Moodle Git repository"
        uses: "actions/checkout@v2"
        with:
          # repository: "git://git.moodle.org/moodle.git"
          repository: "moodle/moodle"
          ref: "${{ matrix.tags }}"
          path: "docker/app"

      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v1"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"

      - name: "Build and push ${{ matrix.tags }}"
        id: "docker_build"
        uses: "docker/build-push-action@v2"
        with:
          push: true
          tags: "${{ env.IMAGE_NAME }}:${{ matrix.tags }}"
          no-cache: true
          context: "./docker/"
          file: "./docker/Dockerfile"
          platforms: linux/amd64,linux/arm64

      - name: "prepare alternative tags if applicable"
        id: "alt_tags"
        # # GitHub workflow outputs need some string substitutions...
        # MY_OUTPUT="${MY_STRING//'%'/'%25'}"
        # MY_OUTPUT="${MY_STRING//$'\n'/'%0A'}"
        # MY_OUTPUT="${MY_STRING//$'\r'/'%0D'}"
        run: |
          # fetch all alternative tags
          alternativeTags=$(
            echo '${{ needs.get_build_info.outputs.retagging }}' |
            jq '.retagging | keys[] as $k | if ( .[$k] == "${{ matrix.tags }}" ) then [ $k ] else empty end' |
            jq -s add
          )
          retag=''
          if [[ $( echo "${alternativeTags}" | jq 'length' ) -gt 0 ]]; then
            echo "Tag “${{ matrix.tags }}” will also be pushed as those tags:"
            alternativeTags=$(
              echo "${alternativeTags}" |
              jq -r '.[]'
            )
            IFS=$'\n'
            for tag in $( echo "${alternativeTags}" ); do
              echo "  ◆ ${tag}"
              if [ -z "${retag}" ]; then
                retag="${{ env.REGISTRY_URL }}${{ env.IMAGE_NAME }}:${tag}"
              else
                retag="${retag}%0A${{ env.REGISTRY_URL }}${{ env.IMAGE_NAME }}:${tag}"
              fi
            done
          else
            echo 'No alternative tags to push for tag “${{ matrix.tags }}”'
          fi
          echo "::set-output name=retag::${retag}"

      - name: "Push re-tagged images "
        uses: "akhilerm/tag-push-action@v2.0.0"
        with:
          src: "${{ env.REGISTRY_URL }}${{ env.IMAGE_NAME }}:${{ matrix.tags }}"
          dst: |
            ${{ steps.alt_tags.outputs.retag }}
        if: "${{ steps.alt_tags.outputs.retag != '' }}"

  documentation:

    needs:
      - "get_build_info"
      - "build_missing_images_by_stable_branches"
      - "build_missing_images_by_tags"
    runs-on: "ubuntu-latest"

    steps:

      - name: "Checkout this repository"
        uses: "actions/checkout@v2"
        with:
          ref: "master"
          path: "docker"

      - name: "Add build date to JSON"
        run: |
          dt=$( date '+%Y-%m-%d %H:%M (%Z)' )
          fileName="./docker/built.json"

          tagList=$( echo '${{ needs.get_build_info.outputs.tags }}' | jq -r '.tags[]' )
          branchList=$( echo '${{ needs.get_build_info.outputs.stablebranches }}' | jq -r '.branches[]' )

          tags=$(
              echo "${built}" |
              jq '.tags'
          )
          IFS=$'\n'
          for tag in $( echo "${tagList}" ); do
              tags="$( echo "${tags}" | jq -S --arg key "${tag}" --arg val "${dt}" '.[ $key ] = $val' )"
          done
          branches=$(
              echo "${built}" |
              jq '.stable_branches'
          )
          IFS=$'\n'
          for branch in $( echo "${branchList}" ); do
              branches="$( echo "${branches}" | jq -S --arg key "${branch}" --arg val "${dt}" '.[ $key ] = $val' )"
          done

          echo "${tags}" |
          jq '{ "tags" : . }' |
          jq --argjson branchJSON "${branches}" '.stable_branches = $branchJSON' \
          > "${fileName}"

      - name: "Commit last built information"
        uses: "stefanzweifel/git-auto-commit-action@v4"
        with:
          commit_message:    "Last built tags"
          commit_user_name:  "GitHub Actions"
          commit_user_email: "dev@winter-martin.de"
          repository:        "./docker/"

...
